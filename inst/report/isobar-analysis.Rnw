% vim: set expandtab ts=2 sw=2:
\SweaveOpts{eps=FALSE}
\SweaveOpts{strip.white=false}
<<initialization,echo=FALSE,results=hide>>=
# this Rnw file should be called by create_reports.R. create_reports 
# initializes the correct data objects to be used in the report.
options(SweaveHooks=list(fig=function()
         par(mar=c(5.1, 4.1, 1.1, 2.1))))
suppressPackageStartupMessages(library(isobar))
options(encoding="UTF-8")  

if (!exists("properties.env")) {
  warning("No properties.env - loading properties")
  properties.env <- load.properties()
}
needed.objects <- c('ibspectra','noise.model','quant.tbl','ratiodistr')
if (!all(needed.objects %in% objects())) {
  warning("Not all necessary objects present - calling initialize.env")
  initialize.env(.GlobalEnv,"protein",properties.env)
}

get.property <- function(name) { get(name,properties.env,inherits=FALSE) }
@
\documentclass[10pt,oneside]{article}
\usepackage[margin=2cm]{geometry}
\usepackage[utf8]{inputenc}
\usepackage{amsmath}
\usepackage{graphicx}
\usepackage{verbatim}
\usepackage{array}
\usepackage{rotating}
\usepackage{tikz}
\usetikzlibrary{arrows,backgrounds,positioning,matrix,shapes.geometric}
\tikzstyle{every picture}+=[remember picture]

% hyper reference
\usepackage{hyperref}
\definecolor{darkblue}{rgb}{0,0,.5}
\hypersetup{pdftex=true, colorlinks=true, breaklinks=true, linkcolor=darkblue, menucolor=darkblue, pagecolor=darkblue, urlcolor=darkblue}

% tables
\usepackage{longtable}
\usepackage{bigstrut}
\usepackage{multirow}
\usepackage{ctable} % for midrule, etc
%\setlength{\tabcolsep}{5pt} %default value: 6pt

<<echo=FALSE,results=tex>>=
cat("\\newcommand{\\analysisname}{",sanitize(get.property('name')),"}")
cat("\\newcommand{\\analysisauthor}{",sanitize(get.property('author')),"}")
cat(sprintf("\\input{%s}\n",system.file("report","report-utils.tex",package="isobar")))
@

\newcommand{\rr}{\raggedright}
\newcolumntype{x}[1]{>{\raggedright}p{#1}}
\newcommand{\tn}{\tabularnewline}
\newcommand{\rh}[1]{\begin{rotate}{65}\textbf{#1}\end{rotate}}
\newcommand{\rth}[1]{\begin{turn}{65}\textbf{#1}\end{turn}}
%\newcommand{\mboxc}[2]{\begin{minipage}{#1}#2\end{minipage}}
\newcommand{\mboxc}[2]{#2}
\newcommand{\secsubtitle}[1]{\begin{flushright}\small\textit{#1}\end{flushright}}

\makeatletter
\renewcommand\paragraph{%
   \@startsection{paragraph}{4}{0mm}%
      {-\baselineskip}%
      {.5\baselineskip}%
      {\normalfont\normalsize\bfseries}}
\makeatother

\usepackage{fancyhdr}
\pagestyle{fancy}
\lfoot{\today}
\cfoot{\thepage}
\rfoot{\analysisname}

%\bibliography{isobar}
%\bibliographystyle{plain}

\title{Isobaric Tag Quantification Report\\ \analysisname\isobarthanks}
\author{\analysisauthor}
\date{\today}
\raggedbottom
\setcounter{tocdepth}{1}

\begin{document}
\maketitle

<<definitions,echo=FALSE,results=tex>>=
protein.group <- proteinGroup(ibspectra)
protein.info <- proteinInfo(protein.group)
isoforms <- protein.group@isoformToGeneProduct

bndt <- 5
bnd <- round(log10(bndt),1)
cat(sprintf("\\newcommand{\\bnd}{%s}",bnd),"\n")
cat(sprintf("\\newcommand{\\bndt}{%s}\n",bndt),"\n")

if (!"class1" %in% colnames(quant.tbl)) quant.tbl$class1 <- quant.tbl$r1
if (!"class2" %in% colnames(quant.tbl)) quant.tbl$class2 <- quant.tbl$r2
cmbn <- t(unique(quant.tbl[,c("r1","r2")]))
cmbn.class <- sanitize(t(unique(quant.tbl[,c("class1","class2")])))
is.single.comparision <- ncol(cmbn) ==1

if (is.single.comparision) {
  name.w <- "8cm"
  coldef <- "@{}rp{8cm}rrrrr@{}r@{}r@{}"
  coldef.s <- "@{}rp{8cm}rrrrr@{}r@{}"
  ncol.p <- 9
  mr <- function(text,width=NULL) text  
} else {
  name.w <- "5cm"
  coldef <- "@{}rp{5cm}rrrrrrrr@{}r@{}"
  coldef.s <- "@{}rp{5cm}rrrrrrrr@{}"
  ncol.p <- 11
  mr <- function(text,width="*")
    sprintf("\\multirow{%s}{%s}{%s}",ncol(cmbn),width,text)  
}
@

<<echo=FALSE,results=tex>>=
cl <- attr(quant.tbl,"classLabels")
cl[is.na(cl)] <- ""
if (!is.null(cl)) {
  if (is.null(names(cl))) {
    cat("\\begin{tabular}{rp{3cm}}\n")
    cat("\\multicolumn{2}{c}{Class Labels} \\bigstrut \\\\ \n")
    cat("channel & class \\\\ \\hline \\bigstrut[t]\n")
    cl <- paste("\\emph{",cl,"}",sep="")
  } else {
    cat("\\begin{tabular}{rrp{3cm}}\n")
    cat("\\multicolumn{3}{c}{Class Labels} \\bigstrut \\\\ \n")
    cat("channel & class & description \\\\ \\hline \\bigstrut[t]\n")
    cl <- paste(paste("\\emph{",cl,"} & "),names(cl),sep="")
  }
  for (i in seq_along(reporterTagNames(ibspectra))) {
    cat(reporterTagNames(ibspectra)[i]," & ",
        cl[i],
        "\\\\ \n")
  }
  cat("\\end{tabular}\n")
}
@
\quad
\begin{tabular}{rp{7.5cm}}
\multicolumn{2}{c}{Column Description} \bigstrut  \\
\emph{protein} & Protein Identification information.  \\
\emph{peptides} & Number of peptides for protein. \\
\emph{spectra} & Number of idenfitied spectra  for protein. \\
\emph{quant} & Number of spectra with quantitative information for \textit{ch2} versus \textit{ch1}. \\
\emph{ratio} & Ratio of protein in channel \textit{ch2} relative to \textit{ch1}. \\
\emph{*} & Significance of protein ratio in sample. \\
\end{tabular}

<<significantly.dfferent.proteins,echo=FALSE,results=tex>>=
if (properties.env$show.significant.proteins) { 

if (is.single.comparision) {
  cat("\\section{Significantly Regulated Proteins ",cmbn.class[2,1],"/",cmbn.class[1,1],"}\n\n")
} else {
  cat("\\section{Significantly Regulated Proteins}\n\n")
}
n.quant <- ddply(quant.tbl,c("class1","class2"),function(x) sum(!is.na(x$lratio) & x$is.significant))
cat("\\secsubtitle{Number of significant proteins: ",paste(sprintf("%s/%s: %s",sanitize(n.quant$class2),sanitize(n.quant$class1),n.quant$V1),collapse="; "),"}\n" )


if (any(quant.tbl$is.significant == 1,na.rm=TRUE)) {  
  cat("\\small")
  print_longtablehdr("protein",coldef.s,!is.single.comparision,ncol.p-1,FALSE)
  draw.hline <- FALSE
  
  for (cmb_i in seq_len(ncol(cmbn))) {
    sel <- quant.tbl$r1==cmbn[1,cmb_i] &
           quant.tbl$r2==cmbn[2,cmb_i] &
           quant.tbl$is.significant == 1
    sel[is.na(sel)] <- FALSE
    if (any(sel)) {
      if (draw.hline) {
        cat (" \\hline\n")
      } else {
        draw.hline = TRUE
      }
      prot_i <- 1
  
      proteins <- quant.tbl[sel,"ac"][order(quant.tbl[sel,"lratio"])]
      for (protein in proteins) {
        prot.info <- my.protein.infos[[protein]]
        protein.row <- quant.tbl[quant.tbl$ac==protein & sel,,drop=FALSE]
        reporter.peptides <- peptides(protein.group,protein=protein)
        n.spectra <- length(names(spectrumToPeptide(protein.group))[spectrumToPeptide(protein.group)%in%reporter.peptides])
        cat("\n")
        cat(" \t",sprintf("\\hyperref[protein.%s]{%s}",
                          protein.row[,"group"],prot_i),
            " & ",sprintf("\\parbox{4cm}{%s}",prot.info$table.name),
            " & {\\footnotesize",paste(prot.info$n.reporter,prot.info$n.groupmember,sep="/"),"}",
            " & ",length(reporter.peptides),
            " & ",n.spectra)
        if (!is.single.comparision) {
            cat(" & ",cmbn[1,cmb_i]," & ",cmbn[2,cmb_i])
        }
            cat(" & ",protein.row[1,"n.spectra"])
            cat(" & ",sprintf("\\textbf{%.2f}",10^protein.row[1,"lratio"]),sep=" ")
        cat(" & ",draw.boxplot(protein.row[1,'lratio'],
                               protein.row[1,'sd'],bnd))

        cat(" \\\\  \n")
        prot_i <- prot_i + 1
      }
    }
  }
  cat("\\end{longtable}\n")
  cat("\\normalsize")
  
} else {
  cat ("No significantly regulated proteins present in sample.")
}
}
@

<<echo=FALSE,results=tex>>=
if (is.single.comparision) {
  cat("\\section{Protein Relative Quantitation ",cmbn.class[2,1],"/",cmbn.class[1,1],"}")
} else {
  cat("\\section{Protein Relative Quantitation}")
}
@

<<allproteins.init,echo=FALSE,results=hide>>=

proteins.n.group <- unique(quant.tbl[,c('ac','group')])
proteins <- proteins.n.group[order(proteins.n.group$group),"ac"]

@

\setlongtables
\setlength\LTleft{0pt}
\setlength\LTright{0pt}
\subsection{Quantified Proteins}
{
 \setlength{\extrarowheight}{1.5pt}

<<proteintbl,echo=FALSE,results=tex>>=
n.quant <- ddply(quant.tbl,c("class1","class2"),function(x) sum(!is.na(x$lratio)))
cat("\\secsubtitle{Number of quantified proteins: ",paste(sprintf("%s/%s: %s",sanitize(n.quant$class2),sanitize(n.quant$class1),n.quant$V1),collapse="; "),"}\n")
cat("\\small\n\n")

print_longtablehdr("protein",coldef,!is.single.comparision,ncol.p,TRUE)

proteins.notquantified <- c()

message("Writing protein quantifications table ...")
for (protein in proteins) {
  protein.rows <- quant.tbl[quant.tbl$ac==protein,,drop=FALSE]
  protein.rows <- protein.rows[order(protein.rows$r1,protein.rows$r2),,drop=FALSE]
  protein.groupnumber <- protein.rows[1,"group"]
  prot.info <- my.protein.infos[[protein]]

  reporter.peptides <- peptides(protein.group,protein=protein)
  spectra <- names(spectrumToPeptide(protein.group))[spectrumToPeptide(protein.group)%in%reporter.peptides]

  if (all(is.na(protein.rows[,'lratio']))) {
    proteins.notquantified <- c(proteins.notquantified,protein)
    next
  }
  protein.names <- prot.info$collapsed.gene_name$protein_name
  gene.names <- c()
  for (prot.gene.name in prot.info$collapsed.gene_name$protein_name) {
    if (is.na(prot.gene.name)) next;
    prot.gene.name <- ifelse(nchar(prot.gene.name)>80,
                             paste(sanitize(substr(prot.gene.name,0,76)),"\\dots"),
                             sanitize(prot.gene.name))
    gene.names <- c(gene.names,prot.gene.name)
    
  }
  if (!is.single.comparision) {
    if (length(gene.names) > ncol(cmbn) - 1) {
      gene.names <- gene.names[seq_len(ncol(cmbn)-1)]
      gene.names[length(gene.names)] <- paste(gene.names[length(gene.names)],", \\dots",sep="")
    }
  }
  cat(mr(sprintf(" \\hyperref[protein.%s]{\\textbf{%s}}",
                 protein.groupnumber,protein.groupnumber)),
      " & ",mr(paste0("\\mboxc{",name.w,"}{",prot.info$table.name,". ",
               paste(gene.names,collapse=",\\newline ")
               ,"}"),name.w),
    #  " & ",mr(paste(prot.info$n.reporter,prot.info$n.groupmember,sep="/")),
      " & ",mr(paste0("{\\footnotesize ",prot.info$n.reporter,"/",prot.info$n.groupmember,"}")),
      " & ",mr(length(reporter.peptides)),
      " & ",mr(length(spectra)),sep=" ")

  for (i in seq_len(ncol(cmbn))) {
    if (i > 1) { cat(paste(rep("&",4),collapse=" ")) }
    if (!is.single.comparision) {
        cat(" & ",protein.rows[i,'r1'])
        cat(" & ",protein.rows[i,'r2'])
    }
    cat(" & ",ifelse(is.na(protein.rows[i,'n.spectra']) | 
                  protein.rows[i,'n.spectra']==0,"",protein.rows[i,'n.spectra']))
    if (is.na(protein.rows[i,"lratio"])) {
      cat (" & & & ")
    } else {
      cat(" & ",sprintf("\\textbf{%.2f}",10^protein.rows[i,"lratio"]))
      cat(" & ",ifelse(protein.rows[i,"is.significant"] == 1,"*",""))
      cat(" & ",draw.boxplot(protein.rows[i,'lratio'],
                             protein.rows[i,'sd'],bnd))
    }
    cat(" \\\\")
    if (i < ncol(cmbn)) cat("*\n")
  }
  if (protein != proteins[length(proteins)] && ncol(cmbn) > 1) {
      cat(" \\midrule[0.02em] \n\n");
  }
}
cat("\\end{longtable}\n")
cat("\\normalsize")
@
}

<<not.quantified,echo=FALSE,results=tex>>=
if (length(proteins.notquantified) > 0) {
cat("\\subsection{Not Quantified Proteins}\n")
n.quant <- ddply(quant.tbl,c("class1","class2"),function(x) sum(is.na(x$lratio)))
cat("\\secsubtitle{Number of identified but not quantified proteins: ",paste(sprintf("%s/%s: %s",sanitize(n.quant$class2),sanitize(n.quant$class1),n.quant$V1),collapse="; "),"}")
cat("\\small")
cat("\\begin{longtable}{rp{12cm}rrr}",
"  \\#",
"  & \\textbf{protein}",
"  & \\rh{group}",
"  & \\rh{peptides}",
"  & \\rh{spectra}",
"\\endhead",sep="\n")

for (protein in proteins.notquantified) {
  protein.rows <- quant.tbl[quant.tbl$ac==protein,,drop=FALSE]
  protein.rows <- protein.rows[order(protein.rows$r1,protein.rows$r2),,drop=FALSE]
  protein.groupnumber <- protein.rows[1,"group"]
  prot.info <- my.protein.infos[[protein]]

  reporter.peptides <- peptides(protein.group,protein=protein)
  spectra <- names(spectrumToPeptide(protein.group))[spectrumToPeptide(protein.group)%in%reporter.peptides]

  protein.names <- prot.info$collapsed.gene_name$protein_name
  gene.names <- c()
  for (prot.gene.name in prot.info$collapsed.gene_name$protein_name) {
    if (is.na(prot.gene.name)) next;
    prot.gene.name <- ifelse(nchar(prot.gene.name)>80,
                             paste(sanitize(substr(prot.gene.name,0,76)),"\\dots"),
                             sanitize(prot.gene.name))
    gene.names <- c(gene.names,prot.gene.name)
    
  }

  cat(sprintf(" \\hyperref[protein.%s]{%s}",
                 protein.groupnumber,protein.groupnumber),
      " & ",paste0("\\mboxc{",name.w,"}{",prot.info$table.name,". ",
               paste(gene.names,collapse=",\\newline ")
               ,"}"),
     # " & ",paste(prot.info$n.reporter,prot.info$n.groupmember,sep="/"),
      " & {\\footnotesize",paste(prot.info$n.reporter,prot.info$n.groupmember,sep="/"),"}",
      " & ",length(reporter.peptides),
      " & ",length(spectra),"\\\\ \n",sep=" ")
}
cat("\\end{longtable}\n")
cat("\\normalsize")
}
@



% Protein Details
%%%%%%%%%%%%%%%%%%

<<proteindetails,echo=FALSE,results=tex>>=
if (properties.env$show.protein.details) {
cat("\\section{Protein Group Details}\n")
cat("Protein groups are created by ")
cat("\\begin{enumerate}
  \\item putting all proteins together which are seen with the same peptides - 
         they are indistinguishable based on available MS data.
  \\item When proteins have peptides unique to them, they are promoted to \\textit{reporters}.
  \\item All proteins without unique peptides are grouped to those reporters which
         contain their peptides.
\\end{enumerate}

Peptide types:
\\begin{center}
\\begin{tabular}{rll}
\\emph{reporter specific} rs &  \\tikz \\node[rs,minimum size=0.2cm] {};  & Number of peptides specific to reporter. \\\\
\\emph{group specific} gs    &  \\tikz \\node[gs,minimum size=0.2cm] {};  & Number of peptides specific to the group (including rs). \\\\
\\emph{unspecific} us        &  \\tikz \\node[us,minimum size=0.2cm] {};  & Number of peptides shared with any protein. \\\\
\\end{tabular}
\\end{center}
")

message("Writing protein group details ...")

colors <- c("blue","red","green","cyan","magenta","yellow")
prot_i <- 1
cat("\\small")
cat("\\begin{longtable}{ll@{}llp{5cm}l}\n")
for (reporter.protein.g in proteins) {
#  protein.name.i <- unique(quant.tbl$latex.protein.name.2[quant.tbl$protein==protein])
  #group.section.name <- my.protein.infos[[reporter.protein.g]]$gene.name
  #gene.name <- my.protein.infos[[reporter.protein.g]]$gene.name
  #if (length(gene.name) == 0 || is.null(gene.name) || 
  #    is.na(gene.name) || nchar(gene.name)==0) {
  #  group.section.name <- paste(my.protein.infos[[reporter.protein.g]]$collapsed.gene_name$ac_nolink,collapse=",")
  #  gene.name <- group.section.name
  #}

  #cat(sprintf("\\paragraph[%s]{%s}\n",
  #            sanitize(ifelse(nchar(gene.name)>40,
  #                     paste(substring(gene.name,1,36),"..."),
  #                     gene.name),dash=F),
  #            sanitize(group.section.name,dash=F)))
  #cat(sprintf("\\label{protein.%s}\n",prot_i))
  draw.proteingroup.row(sprintf("\\label{protein.%s} %s",prot_i,prot_i),protein.group,reporter.protein.g)
  prot_i <- prot_i + 1
  
}
cat("\\end{longtable}\n")
cat("\\normalsize")
}
@

\end{document}
